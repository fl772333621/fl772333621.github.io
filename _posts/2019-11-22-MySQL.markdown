---
layout: post
category: "read"
title:  "MySQL 面试题"
tags: [MySQL]
---

# 1 MySQL的复制原理及流程(BIOS)

基本原理流程，3个线程以及之间的关联如下：

1. master节点binlog线程：记录下所有改变了数据库数据的语句，放到binlog内
2. slave节点io线程：在start slave之后，负责从master上拉取binlog内容到自己的relay log中
3. slave节点sql执行线程：执行relay log中的语句

详解：

MySQL数据库本身提供主从复制功能可以方便的实现数据的多处自动备份，实现数据库的扩展。

多个数据库备份不仅可以加强数据的安全性，还可以通过读写分离进一步提升数据库的负载性能。

在一主多从的数据库体系内，多个从数据库采用异步的方式更新主数据库的变化，业务执行写或者相关修改数据的操作是在主数据库上进行的，读操作则是在各自的从数据库上执行的。

MySQL之间数据复制的基础是二进制日志文件（binary log file，简称binlog）。一台MySQL数据库一旦启用binlog之后，那么它就是master了，它的所有操作都会以事件的方式记录在binlog内，其他数据库作为slave通过io线程与master保持通信，监控master的binlog的变化后则把变化复制到自己的中继日志（relay log）中，然后slave的一个SQL执行线程会把相关的事件执行到自己的数据库内，以此实现数据库的主从一致性，即主从复制。



# 2 MySQL中Myisan和Innodb的区别

|        | 事务 | 行级锁 | MVCC | 外键 | 全文索引 |
| ------ | ---- | ------ | ---- | ---- | -------- |
| Myisan | N    | N      | N    | N    | Y        |
| Innodb | Y    | Y      | Y    | Y    | N        |

Innodb和Myisan执行同一个SQL：select count(*) from table_name 哪一个更快，为什么？

答：Myisan更快，因为其内部维护了一个计算器，可以直接获取数目。

Myisan的数据和索引是分开的，并且索引有压缩，内存使用率提高了很多，一次性能加载更多的索引数据。

Innoda的数据和索引是紧紧绑定的。



# 3 MySQL中varchar和char的区别

char是一种固定长度的类型，varchar则是一种可变长度的类型。



# 4 varchar(50)中50的含义

表示最多可存放50个字符。varchar(50)和varchar(200)存储hello字符串所占用的空间一样，但是后者在排序时会消耗更多的内存，因为order by col采用fixed_length计算col的长度



# 5 Innodb的日志

| 日志类型   | 描述                                                 |
| ---------- | ---------------------------------------------------- |
| 错误日志   | 记录出错的信息，也记录警告信息或者正确的信息         |
| 查询日志   | 记录所有对数据库的请求信息，无论是否得到了正确的执行 |
| 慢查询日志 | 设置一个阈值，记录运行时间超过该阈值的所有SQL语句    |
| 二进制日志 | 记录所有对数据库的更改操作                           |
| 中继日志   |                                                      |
| 事务日志   |                                                      |



# 6 Innodb的事务隔离级别

![MySQL事务隔离级别](../assets/MySQL事务隔离级别.png)



RU：读未提交产生脏读问题

RC：读已提交产生不可重复度问题

​		不可重复读意味着在同一个事务内完全相同的select语句结果可能不一样

RR：可重复度产生幻读问题

​		幻读意味着同一个事务内完全相同的select count(1)语句结果可能不一样

S：事务的最高隔离级别，通过强制事务排序，解决幻读问题。



MySQL的默认事务隔离级别是RR可重复度

```sql
# 更改隔离级别(可选read-uncommitted/read-committed/repeatable-read/serializable)
set tx_isolation='repeatable-read'
# 查看当前的事务隔离级别
select @@tx_isolation
+-----------------+
| @@tx_isolation  |
+-----------------+
| REPEATABLE-READ |
+-----------------+
```



# 7 一张表内ID为自增主键，insert 10条数据，delete id=8，重启MySQL前后再insert，新记录id=？

| 表类型 | 重启前后 | id值 | 说明                                                         |
| ------ | -------- | ---- | ------------------------------------------------------------ |
| Myisan | 重启前   | 11   | Myisan会把自增主键的最大ID记录到数据文件内，且重启后不会丢失 |
| Myisan | 重启后   | 11   |                                                              |
| Innodb | 重启前   | 11   | Innodb只是把自增主键的最大ID记录到内存内，重启或者对表优化都会丢失 |
| Innodb | 重启后   | 8    |                                                              |



# 8 MySQL为什么要使用自增列作为主键

1. 如果我们定义了自增主键，那么Innodb会选择主键作为聚集索引；如果没有显式定义主键，则InnoDB会选择第一个不包含NULL值的唯一索引作为主键索引，如果还没有这样的唯一索引，则会选择内置的rowid
2. 数据记录本身被存在主索引的叶子节点上，这就要求同一个叶子节点内的各条数据按照主键顺序存放
3. 如果表使用自增主键，那么每次插入新的位置，就会顺序添加到当前索引的后续位置，一页写满就自动开辟新的一页
4. 如果使用非自增主键，由于每次插入主键的值近似于随机，因此每次新记录都有可能插入到现有索引页的中间某个位置，这样MySQL就不得不为了新记录插入到合适的位置而移动数据，并清空缓存。如此多的读写磁盘、移动分页造成了大量的碎片，最终也得不到紧凑的索引结构



# 9 为什么数据索引能提高效率

1. 数据索引的存储是有序的
2. 在有序的基础上，通过索引查询一个数据是无序遍历索引记录的
3. 极端情况下，数据索引的查询效率为二分法查询效率，趋近于log2(n)



# 10 B+树索引和哈希索引的区别

B+树是一个平衡的多叉树，从根节点到每个叶子节点的高度差不超过1，而且叶子节点的指针都是相互连接的，有序的。

哈希索引就是采用哈希算法，把键值换算成哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，是只需要一次哈希算法即可得到位置，是无序存储

**哈希索引的优势**

等值查询，哈希索引有绝对优势。（前提是没有大量的重复键值，因为如果存在大量重复的键值，会存在大量的哈希碰撞）

**哈希索引不适用的场景**

1. 哈希索引不支持范围查询
2. 哈希索引不支持索引完成排序
3. 哈希索引不支持联合索引的最左前缀匹配规则

通常，B+树索引结构适用于绝大多数的场景，像如下的场景使用哈希索引才会更有优势：

>在HEAP表中，如果数据存储的重复率比较低，对该列数据以等值查询为主，没有范围查询，没有排序。那么使用哈希索引会更有优势。
>
>```sql
># 仅等值查询
>select id, name from table where name = '黎明'
>```



# 11 MySQL联合索引

联合索引是两个及两个以上的列共同组成的索引

对于联合索引，MySQL从左到右的使用索引中的字段，一个查询可以只使用联合索引的部分，但只能是最左侧部分。例如索引是 key index(a,b,c) ，那么可以支持a、a,b、a,b,c 三种组合进行索引查询



# 12 什么情况下应该不建或者少建索引

1. 表记录太少
2. 经常插入、删除、修改（或者表述为插入删除修改等操作远远大于查询操作）
3. 重复性较强的数据表字段，例如一个表内有10万行记录，性别字段仅有男或者女两种值，那么对性别字段建索引不会提高查询速度。
4. 经常和主字段一块查询但主字段索引值比较多的表字段（不太懂）



# 13 MySQL分区

## 13.1 什么是表分区

表分区，是指根据一定的规则，将数据库中的一张表分解为多个更小的部分。逻辑上看只有一张表，但是底层是多个物理分区组成

## 13.2 表分区和分表的区别

分表：一个表拆分为多张表

区别在于：分区是逻辑上来讲仍然只有一张表，而分表是从逻辑上将一张表拆分为多张表

## 13.3 表分区有什么好处

1. 分区表的数据可以存储到不同的物理设备上，从而高效的利用多个硬件设备。
2. 和单个磁盘或者文件系统比较，可以存储更多的数据
3. 优化查询。在where语句中包含分区条件时，可以只扫描一个或者指定的多个分区提高查询效率；涉及sum和count操作时候也可以在多个分区上并行处理，最后汇总结果。
4. 表分区更容易维护，例如像平力量删除大量数据可以清除整个分区。



## 13.4 MySQL支持的分区类型有哪些

1. Range分区：允许将数据划分不同范围。例如可以根据年份划分为多个分区
2. List分区：语序通过指定的列表值进行数据分割。与range分区的区别是range是连续的，list可以不连续
3. Hash分区：根据HashKey进行分区



# 14 行级锁的优点

1. 多线程环境下访问不同的行只存在少量的行锁定冲突
2. 回滚时仅有少量更改
3. 可以长时间的锁定单一的行



# 15 行级锁的缺点

1. 比`页级锁`或者`表级锁`占用更多的内存
2. 当在表的大部分中使用时，比页级锁或表级锁速度慢，因为你必须获取更多的锁
3. 执行group by等操作需要扫描全表时，也会慢，同样因为必须获取更多锁



# 16 MySQL 优化

1. 开启查询缓存，优化查询
2. explain你的select语句，可以帮助分析师查询语句或者是表结构的性能瓶颈。explain的结果会告知你索引的主键是如何利用的，你的数据是如何被搜索和排序的。
3. 当仅需要一行数据的时候要使用limit 1，这样MySQL数据库引擎会在找到一条数据后停止搜索，否则会继续查找剩下的记录
4. 为搜索字段建立索引
5. 使用enum而不是varchar，特别是性别、国家、民族、状态等取值有限而且固定的字段，且该字段不需要建立索引
6. prepared statement的使用，防止sql注入
7. 垂直分表
8. 选择正确的存储引擎



# 17 key和index的区别

key是数据库的物理结构，包含两层意义和作用。一个是约束（偏重于约束和规范数据库的结构完整性），一个是索引（辅助查询用）包含 primary key， unique key， foreign key等

index是数据库的物理结构，只是辅助查询，它创建时会在另一个表空间里以一个类似目录的结构存储。

索引分类可分为前缀索引和全文本索引。



来源1 [MySQL经典面试题](https://blog.csdn.net/weixin_42688876/article/details/81480311)

